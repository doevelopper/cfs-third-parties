# sudo usermod -a -G sudo gitlab-runner
# sudo visudo or sudo vi /etc/sudoers
# %gitlab-runner ALL=(ALL) NOPASSWD: ALL

stages:
    - sw-quality-tools
    - dev-utils
    - dependencies
    - data-distribution-service
    - feature-test
    - target-package
    - target-install
    - deploy
    - target-clean

.agent-47: &agent-47
#    retry: 1
    tags:
        - agent-smith

.only_stable: &only_stable
    only:
        - master
        - /^release-.*$/

.tumbleweed: &tumbleweed
    only:
        - develop

.artifacts: &artifacts
    artifacts:
        name: "${CI_JOB_NAME}_${CI_COMIT_REF_NAME}_${CI_COMMIT_SHA}"
        when: always
        expire_in: 31d
        paths:
            - ${DEPS_INSTALL_DIR}

.3rd-party-cache: &3rd-party-cache
#    key: # ${CI_COMMIT_REF_SLUG} # Cache in between builds
    key: "Ubuntu-18-10-DDS-Dev-Tools" # ${CI_COMMIT_REF_SLUG} # Cache in between builds
    paths:
        - ${DEPS_INSTALL_DIR}/

.variables: &variables
    variables:
#        DEPS_INSTALL_DIR: ${CI_PROJECT_DIR}/devslibs
    # DEPS_INSTALL_DIR: /opt/devslibs
    # DEPS_INSTALL_DIR: ${CI_PROJECT_DIR}/devslibs
    # DEPS_INSTALL_DIR: ${HOME}/devslibs
        DEPS_INSTALL_DIR: /home/gitlab-runner/third-party-software-component

.push-cache: &push-cache
    cache:
    <<: *3rd-party-cache
    policy: push

.pull-cache: &pull-cache
    cache:
    <<: *3rd-party-cache
    policy: pull

.build-metadata: &build-metadata
    <<: *agent-47
    <<: *pull-cache
    stage: test

before_script:
    - cmake --version
    - make --version
    - date
    - hostname

after_script:
    - date

.uncrustify:
    <<: *agent-47
    <<: *variables
    stage: sw-quality-tools

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/uncrustify/uncrustify.git
        - cd uncrustify
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first 
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u


.cppcheck:
    <<: *agent-47
    <<: *variables
    stage: sw-quality-tools

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/danmar/cppcheck.git
        - cd cppcheck
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first 
        - cmake --build build --target install
        - cp --recursive --verbose cfg  ${DEPS_INSTALL_DIR}/bin || true
        - cd ..

    after_script:
        - date -u

.doxygen:
    <<: *agent-47
    <<: *variables
    stage: sw-quality-tools

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/doxygen/doxygen.git 
        - cd doxygen
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

.testing-tools-libraries:
    <<: *agent-47
    <<: *variables
    stage: dev-utils

    before_script:
        - date -u
#        - sudo apt-get install libelf-dev  elfutils libelf1
        - export QTDIR=/opt/Qt5.11.2/5.11.2/gcc_64
        - export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH
        - export CMAKE_PREFIX_PATH=${DEPS_INSTALL_DIR}:$CMAKE_PREFIX_PATH
    script:
        - echo "Building Google Test"
        - git clone --depth=1 https://github.com/abseil/googletest.git
        - cd googletest
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google Bench Mark"
        - git clone --depth=1 https://github.com/google/benchmark.git
        - cd benchmark
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google glog Library"
        - git clone --depth=1 https://github.com/google/glog.git
        - cd glog
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google crc32c Library"
        - git clone --depth=1 --recurse-submodules https://github.com/google/crc32c.git
        - cd crc32c
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google StateChart"
        - git clone --depth=1 https://github.com/google/statechart.git
        - cd statechart
        - cmake -E make_directory build
#        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
#        - cmake --build build --target all --clean-first
#        - cmake --build build --target install
        - cd ..

        # - echo "Building Google Abseil CPP Library"
        # - git clone --depth=1 --recurse-submodules  https://github.com/abseil/abseil-cpp.git
        # - cd abseil-cpp
        # - cmake -E make_directory build
        # - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        # - cmake --build build --target all --clean-first
        # - cmake --build build --target install
        # - cd ..

        # - echo "Building Google Capture Thread Library"
        # - git clone --depth=1 --recurse-submodules  https://github.com/google/capture-thread.git
        # - cd capture-thread
        # - cmake -E make_directory build
        # - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        # - cmake --build build --target all --clean-first
        # - cmake --build build --target install
        # - cd ..

        - echo "Building American fuzzy lop"
        - curl -L -O -k http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz
        ## - tar zxvf afl-latest.tgz --one-top-level=american-fuzzy-lop
        - tar -xvzf afl-latest.tgz
        - cd afl-2.52b
        - make clean && make && make  DESTDIR=${DEPS_INSTALL_DIR} BINDIR=${DEPS_INSTALL_DIR}/bin DATAROOTDIR=${DEPS_INSTALL_DIR}/share LIBDIR=${DEPS_INSTALL_DIR}/lib install
        - cd ..

        - echo "Building A unit testing framework for C"
        - git clone --depth=1 https://github.com/libcheck/check.git
        - cd check
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        - cmake --build build --target all --clean-first
        - CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test
        - cmake --build build --target install || true
        - cd ..

        # - echo "Building The Linux perf GUI for performance analysis."
        # - git clone --depth=1 --recurse-submodules https://github.com/KDAB/hotspot.git
        # - cd hotspot
        # - cmake -E make_directory build
        # - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        # - cmake --build build --target all --clean-first
        # - CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test
        # - cmake --build build --target install
        # - cd ..

        # - echo "Building The Linux perf GUI for performance analysis."
        # - git clone --depth=1 --recurse-submodules https://github.com/apitrace/apitrace.git
        # - cd apitrace
        # - cmake -E make_directory build
        # - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        # - cmake --build build --target all --clean-first
        # - CTEST_OUTPUT_ON_FAILURE=1 cmake --build build --target test
        # - cmake --build build --target install
        # - cd ..

        - echo "Building IEEE doubles binary-decimal and decimal-binary ."
        - git clone --depth=1 https://github.com/google/double-conversion.git 
        - cd double-conversion
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        - cmake --build build --target all --clean-first
#        - test/cctest/cctest --list | tr -d '<' | xargs test/cctest/cctest
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

.logging utils:
    <<: *agent-47
    <<: *variables
    stage: dependencies

    before_script:
        - date -u

    script:
        - echo "Building Apache Runtime Library"
        - wget --quiet https://www-us.apache.org/dist/apr/apr-1.6.5.tar.gz
        - tar -xvzf apr-1.6.5.tar.gz > /dev/null
        - cd apr-1.6.5
        - ./configure --prefix=${DEPS_INSTALL_DIR} --enable-threads --enable-posix-shm 
            --enable-allocator-guard-pages --enable-pool-concurrency-check --enable-other-child
        - make clean && make && make install
        - cd ..

        - echo "Building Expat Library"
        - git clone --depth=1 https://github.com/libexpat/libexpat.git
        - cd libexpat/expat
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ../../

        - echo "Building Apache Runtime Utils Library"
        - wget --quiet https://www-us.apache.org/dist//apr/apr-util-1.6.1.tar.gz
        - tar -xvf apr-util-1.6.1.tar.gz > /dev/null
        - cd apr-util-1.6.1
        - ./configure --prefix=${DEPS_INSTALL_DIR} --with-apr=${DEPS_INSTALL_DIR}  --with-expat=${DEPS_INSTALL_DIR}
        - make clean && make && make install
        - cd ..

        - echo "Building Apache logging library Log4cxx"
        - git clone --depth=1 https://gitbox.apache.org/repos/asf/logging-log4cxx.git
        - cd logging-log4cxx
        - ./autogen.sh
        - ./configure --prefix=${DEPS_INSTALL_DIR} --with-apr=${DEPS_INSTALL_DIR} 
            --with-apr-util=${DEPS_INSTALL_DIR} --with-ODBC=no --with-SMTP=no 
            --enable-char --enable-wchar_t 
            --with-charset=utf-8 --with-logchar=utf-8
        - make clean && make && make install
        - cd ..

    after_script:
        - date -u

.protocol-buffers:
    <<: *agent-47
    <<: *variables
    stage: dependencies

    before_script:
        - date -u

    script:
        - cmake --version
        - echo "Buildinggoogle protocol buffer"
        - git clone --depth=1 https://github.com/protocolbuffers/protobuf.git
        - cd protobuf
        - ./autogen.sh
        - ./configure --prefix=${DEPS_INSTALL_DIR}
        - make clean && make && make install
        - cd ..

    after_script:
        - date -u

.boost:
    <<: *agent-47
    <<: *variables
    stage: dependencies
    before_script:
        - date -u
    script:
        - cmake --version
        - echo "Building Boost latest"
        - curl -L -O -k https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
        - tar -xvf boost_1_68_0.tar.gz > /dev/null
        - cd boost_1_68_0
#[--with-libraries=program_options,filesystem,system,date-time,regex,thread]
        - ./bootstrap.sh --prefix=${DEPS_INSTALL_DIR} --with-python=python3
        - ./b2 link=shared threading=multi variant=release
        - ./b2 install --prefix=${DEPS_INSTALL_DIR}
        - cd ..

    after_script:
        - date -u

.xerces:
    <<: *agent-47
    <<: *variables
    stage: dependencies
    before_script:
        - date -u
    script:
        - echo "Building Xerces for DDS"
        - curl -L -O http://www-us.apache.org/dist//xerces/c/3/sources/xerces-c-3.2.2.tar.gz
        - tar -xvzf xerces-c-3.2.2.tar.gz  > /dev/null
        - cd xerces-c-3.2.2/
        - ./configure --prefix=${DEPS_INSTALL_DIR}
            --enable-static --enable-shared --enable-netaccessor-socket
            --enable-transcoder-gnuiconv --enable-transcoder-iconv
            --enable-msgloader-inmemory --enable-xmlch-uint16_t --enable-xmlch-char16_t
        # - make -j2 | tee $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
        # - make install | tee -a $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
        - make clean && make && make install
        - cd ..
    after_script:
        - date -u

.wireshark:
    <<: *agent-47
    <<: *variables
    stage: dependencies
    before_script:
        - date -u
        - export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH
        - export QTDIR=/opt/Qt5.11.2/5.11.2/gcc_64
    script:
        - echo "Building Wireshark for DDs Dissectors"
#        - sudo apt-get install libpulse-dev
        - GIT_SSL_NO_VERIFY=1 git clone --depth=1 --recurse-submodules https://github.com/wireshark/wireshark.git
        - cd wireshark
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

.eprosima-dds:
    <<: *agent-47
    <<: *variables
    stage: data-distribution-service

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 --recurse-submodules https://github.com/eProsima/Fast-RTPS.git
        - cd Fast-RTPS
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DTHIRDPARTY=ON -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR}/eprosima
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

OpenDDS:
    <<: *agent-47
    <<: *variables
    variables:
        DEPS_INSTALL_DIR: /home/gitlab-runner/third-party-software-component
        FUZZ: "true" 
        STATIC: "true"
        XERCES3: "true"
        NO_TESTS: "true"
        NO_INLINE: "true"
        NO_BUILT_IN_TOPICS: "true"
        NO_INLINE: "true"
        VERSIONED_NS: "true"
        DDS_SECURITY: "true"
        NO_DEBUG: "true"
        NO_TESTS: "true"
        SAFETY_PROFILE: "true"
        NO_INLINE: "true"
        USES_WCHAR: "true"
        NO_INLINE: "true"
        NO_MULTITOPIC: "true"
        XERCES3: "true"
        ACE_ROOT: ${CI_PROJECT_DIR}/ACE_TAO/ACE
        TAO_ROOT: ${CI_PROJECT_DIR}/ACE_TAO/TAO
        MPC_ROOT: ${CI_PROJECT_DIR}/MPC
        DDS_ROOT: ${CI_PROJECT_DIR}
        LD_LIBRARY_PATH: $ACE_ROOT/lib:$LD_LIBRARY_PATH
        OPENDDS_BUILD_OPTIONS: -std=c++11 --ipv6 --openssl --xerces3=${DEPS_INSTALL_DIR} --rapidjson --glib --boost=${DEPS_INSTALL_DIR}
        OPENDDS_BUILD_CONFIG_OPTIONS: --no-tests --no-inline --safety-profile --features=versioned_namespace=1 --security
        COMPILER: g++-8

    dependencies:
        - testing-tools-libraries
        - boost
        - protocol-buffers
        - xerces
        - wireshark

    stage: data-distribution-service

    before_script:
        - date -u
        - export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH
        - export QTDIR=/opt/Qt5.11.2/5.11.2/gcc_64
        - export CFLAGS="-I${DEPS_INSTALL_DIR}/include:${CFLAGS}"
        - export CPPFLAGS="-I${DEPS_INSTALL_DIR}/include:${CPPFLAGS}"
        - export LDFLAGS="-L${DEPS_INSTALL_DIR}/lib/:${LDFLAGS}"
        - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${DEPS_INSTALL_DIR}/lib"
        - export PATH="${PATH}:${DEPS_INSTALL_DIR}/include:${DEPS_INSTALL_DIR}/lib"

    script:
        - echo "Cloning MPC for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/MPC.git

        - echo "Cloning ACE TAO for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/ACE_TAO.git

        - echo "Cloning CIAO for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/CIAO.git

        - echo "Cloning DANCE for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/DAnCE.git

        - echo "Cloning mFAST encoding/decoding library"
        - git clone --depth=1 --recursive https://github.com/objectcomputing/mFAST.git
        - cd mFAST
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_INSTALL_DIR} 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Cloning OpenDDS"
        - git clone --depth=1 --recurse-submodules  https://github.com/objectcomputing/OpenDDS.git
        - echo "Building OpenDDS"
        - cd OpenDDS
        - ./configure --help
        - echo "Build Options $OPENDDS_BUILD_OPTIONS"
        - echo "Build Config Options $OPENDDS_BUILD_CONFIG_OPTIONS"
        - echo "CPPFLAGS $CPPFLAGS"
        - echo "LDFLAGS $LDFLAGS"
        - echo "ACE_ROOT $ACE_ROOT"
        - echo "TAO_ROOT $TAO_ROOT"
        - echo "MPC_ROOT $MPC_ROOT"
        - echo "prefix ${DEPS_INSTALL_DIR}/opendds"
        - ./configure $OPENDDS_BUILD_OPTIONS  $OPENDDS_BUILD_CONFIG_OPTIONS
            --mpcopts="-workers 2" --ace=$ACE_ROOT --tao=$TAO_ROOT --mpc=$MPC_ROOT
            --prefix=${DEPS_INSTALL_DIR}/opendds

#        - |
#          if [ "$SAFETY_PROFILE" == "1" ]; then
#              export LD_LIBRARY_PATH+=:${CI_PROJECT_DIR}/build/target/ACE_TAO/ACE/lib:${CI_PROJECT_DIR}/build/target/lib;
#          fi
        - make clean && make && make install
        - cd ..

    after_script:
        - date -u

.vortex-opensplice-dds:
    <<: *agent-47
    <<: *variables
    stage: data-distribution-service
    dependencies:
        - protocol-buffers

    before_script:
        - date -u
#        sudo apt-get install python-wheel cython cython3 python3-wheel  #build Python DCPS API
        # - export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH
        # - export QTDIR=/opt/Qt5.11.2/5.11.2/gcc_64
#        - export PROTOBUF_HOME=`pwd`
        - export  PROTOBUF_HOME=${DEPS_INSTALL_DIR}

    script:
        - git clone --depth=1 https://github.com/ADLINK-IST/opensplice.git
        - mkdir -pv submods/MPC_ROOT
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/MPC.git
        - cd opensplice
        - ./configure x86_64.linux-release
        - source envs-x86_64.linux-release.sh
        - make && make install
        - cd ..

    after_script:
        - date -u
        # - mkdir -pv ${DEPS_INSTALL_DIR}/adlinktech
        # - cp -v envs-x86_64.linux-release.sh ${DEPS_INSTALL_DIR}/adlinktech
        # - cp -Rv opensplice/install/HDE ${DEPS_INSTALL_DIR}/adlinktech
        # - cp -Rv opensplice/install/RTS ${DEPS_INSTALL_DIR}/adlinktech
        # - cp -Rv opensplice/install/VS ${DEPS_INSTALL_DIR}/adlinktech

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
#            - ${DEPS_INSTALL_DIR}
            - opensplice/envs-x86_64.linux-release.sh
            - opensplice/install/HDE
            - opensplice/install/RTS
            - opensplice/install/VS

eprosima-dds-feature-test:
    <<: *agent-47
    stage: feature-test
    before_script:
        - echo  "Testing Fast RTPS Features."

    script:
        - echo  "Building and testing Fast RTPS Features."

    after_script:
        - echo  "Testing Fast RTPS Features Done."

openDDS-Feature-Test:
    <<: *agent-47
    stage: feature-test
    before_script:
        - echo  "Testing OpenDDS Features."

    script:
        - echo  "Building and testing Fast RTPS Features."

    after_script:
        - echo  "Testing Fast RTPS Features Done."

Vortex-OpenSplice-Feature-Test:
    <<: *agent-47
    stage: feature-test
    before_script:
        - echo  "Testing AdLinkTech DDS Features."

    script:
        - echo  "Building and testing AdLinkTech Features."

    after_script:
        - echo  "Testing AdLinkTech Features Done."

RTI-DDS-connex-Feature-Test:
    <<: *agent-47
    stage: feature-test
    before_script:
        - echo  "Testing RTI DDS connex Features."

    script:
        - echo  "Building and testing RTI DDS connex Features."

    after_script:
        - echo  "Testing RTI DDS connex Features Done."
