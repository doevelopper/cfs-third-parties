stages:
    - dependencies
    - compile
    - test
    - target-package
    - target-install
    - deploy
    - target-clean

# Cache in between builds
cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - ${CI_PROJECT_DIR}/devslibs
        - compilers
        - vendor/ruby

uncrustify:
    stage: dependencies

    before_script:
        - echo "Only when AArch64 is true"
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/uncrustify/uncrustify.git
        - cd uncrustify
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first 
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

    tags:
        - agent-smith

#    only:
#        variables:
#            - ${BOOTSTRAP}

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

cppcheck:
    stage: dependencies

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/danmar/cppcheck.git
        - cd cppcheck
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs
        - cmake --build build --target all --clean-first 
        - cmake --build build --target install
        - cp --recursive --verbose cfg  ${CI_PROJECT_DIR}/devslibs/bin || true
        - cd ..

    after_script:
        - date -u

    tags:
        - agent-smith

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

doxygen:
    stage: dependencies

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 https://github.com/doxygen/doxygen.git 
        - cd doxygen
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_NAMESPACE/dds
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

    tags:
        - agent-smith

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

apache:
    stage: dependencies

    before_script:
        - date -u

    script:
        - echo "Building Apache Runtime Library"
        - wget --quiet https://www-us.apache.org/dist/apr/apr-1.6.5.tar.gz
        - tar -xvzf apr-1.6.5.tar.gz > /dev/null
        - cd apr-1.6.5
        - ./configure --prefix=${CI_PROJECT_DIR}/devslibs --enable-threads --enable-posix-shm 
            --enable-allocator-guard-pages --enable-pool-concurrency-check --enable-other-child
        - make clean && make && make install
        - cd ..

        - echo "Building Expat Library"
        - git clone --depth=1 https://github.com/libexpat/libexpat.git
        - cd libexpat/expat
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ../../

        - echo "Building Apache Runtime Utils Library"
        - wget --quiet https://www-us.apache.org/dist//apr/apr-util-1.6.1.tar.gz
        - tar -xvf apr-util-1.6.1.tar.gz > /dev/null
        - cd apr-util-1.6.1
        - ./configure --prefix=${CI_PROJECT_DIR}/devslibs --with-apr=${CI_PROJECT_DIR}/devslibs 
        - make clean && make && make install
        - cd ..

        - echo "Building Apache logging library Log4cxx"
        - git clone --depth=1 https://git-wip-us.apache.org/repos/asf/logging-log4cxx.git
        - cd logging-log4cxx
        - ./autogen.sh
        - ./configure --prefix=${CI_PROJECT_DIR}/devslibs --with-apr=${CI_PROJECT_DIR}/devslibs 
            --with-apr-util=${CI_PROJECT_DIR}/devslibs --with-ODBC=no --with-SMTP=no 
            --enable-char --enable-wchar_t 
            --with-charset=utf-8 --with-logchar=utf-8
        - make clean && make && make install
        - cd ..

    tags:
        - agent-smith

    after_script:
        - date -u

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

google-tools:
    stage: dependencies

    before_script:
        - date -u

    script:
        - echo "Building Google Test"
        - git clone --depth=1 --recurse-submodules https://github.com/google/googletest.git
        - cd googletest
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building gogole Bench Mark"
        - git clone --depth=1 --recurse-submodules https://github.com/google/benchmark.git
        - cd benchmark
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google StateChart"
        - git clone --depth=1 https://github.com/google/statechart.git
        - cd statechart
        - cmake -E make_directory build
#        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
#        - cmake --build build --target all --clean-first
#        - cmake --build build --target install
        - cd ..

        - echo "Building Google Abseil CPP Library"
        - git clone --depth=1 https://github.com/abseil/abseil-cpp.git 
        - cd abseil-cpp
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
#        - cmake --build build --target install
        - cd ..

        - echo "Building Google Capture Thread Library"
        - git clone --depth=1 https://github.com/google/capture-thread.git 
        - cd capture-thread
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Google crc32c Library"
        - git clone --depth=1  https://github.com/google/crc32c.git
        - cd crc32c
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Buildinggoogle protocol buffer"
        - git clone  --recurse-submodules --depth 1 https://github.com/protocolbuffers/protobuf.git
        - cd protobuf
        - ./autogen.sh
        - ./configure --prefix=${CI_PROJECT_DIR}/devslibs
        - make clean && make && make install
        - cd ..

    tags:
        - agent-smith

    after_script:
        - date -u

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

eprosima-dds:
    stage: dependencies

    before_script:
        - date -u

    script:
        - cmake --version
        - git clone --depth=1 --recurse-submodules https://github.com/eProsima/Fast-RTPS.git
        - cd Fast-RTPS
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DTHIRDPARTY=ON -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs/eprosima
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

    after_script:
        - date -u

    tags:
        - agent-smith

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

OpenDDS:
    variables:
        ACE_ROOT: ACE_TAO/ACE 
        TAO_ROOT: ACE_TAO/TAO
        MPC_ROOT: MPC 
    stage: dependencies

    before_script:
        - date -u
        - LD_LIBRARY_PATH=$ACE_ROOT/lib:$LD_LIBRARY_PATH
        - if [[ "${COMPILER_CC}" != "" ]]; then export CC=${COMPILER_CC}; fi
        - if [[ "${COMPILER_CXX}" != "" ]]; then export CXX=${COMPILER_CXX}; fi
        - export CC=gcc-8
        - export CXX=g++-8
        - export CCOV=gcov-8
        - export AR=gcc-ar-8
        - export RANLIB=gcc-ranlib-8
    script:
        - echo "Building Xerces for DDS"
        - wget --quiet http://www-us.apache.org/dist//xerces/c/3/sources/xerces-c-3.2.2.tar.gz
        - tar -xvzf xerces-c-3.2.2.tar.gz > /dev/null
        - cd xerces-c-3.2.2/
        - ./configure --prefix=${CI_PROJECT_DIR}/devslibs
            --enable-static --enable-shared --enable-netaccessor-socket
            --enable-transcoder-gnuiconv --enable-transcoder-iconv
            --enable-msgloader-inmemory --enable-xmlch-uint16_t --enable-xmlch-char16_t
        # - make -j2 | tee $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
        # - make install | tee -a $CI_PROJECT_NAMESPACE/build-logs/xerces-build.log
        - make clean && make && make install
        - cd ..

        - echo "Building Wireshark for DDs Dissectors"
#        - sudo apt-get install libpulse-dev
        - git clone --depth=1 --recurse-submodules https://code.wireshark.org/review/p/wireshark.git
        - cd wireshark
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        - echo "Building Boost latest"
        - wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
        - tar -xvf boost_1_68_0.tar.gz > /dev/null
        - cd boost_1_68_0
        - ./bootstrap.sh --prefix=${CI_PROJECT_DIR}/devslibs #[--with-libraries=program_options,filesystem,system,date-time,regex,thread]
        - ./b2 link=shared threading=multi variant=release 
        - cd ..

        - echo "Cloning MPC for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/MPC.git

        - echo "Cloning ACE TAO for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/ACE_TAO.git

        - echo "Cloning CIAO for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/CIAO.git

        - echo "Cloning DANCE for DDS"
        - git clone --depth=1 --recurse-submodules https://github.com/DOCGroup/DAnCE.git

        - echo "Cloning mFAST encoding/decoding library"
        - git clone --depth=1 --recursive https://github.com/objectcomputing/mFAST.git
        - cd mFAST
        - cmake -E make_directory build
        - cmake -E chdir build cmake .. -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/devslibs 
        - cmake --build build --target all --clean-first
        - cmake --build build --target install
        - cd ..

        # - echo "Cloning OpenDDS"
        # - git clone --depth=1 --recurse-submodules https://github.com/objectcomputing/OpenDDS.git
        # - echo "Building OpenDDS"
        # - ./configure -std=c++11 --ipv6 --openssl --xerces3 --rapidjson --glib --boost
            # --no-tests --ace=$ACE_ROOT --tao=$TAO_ROOT --mpc=$MPC_ROOT
            # --prefix=${CI_PROJECT_DIR}/devslibs/opendds
        # - make clean && make && make install
        # - cd ..
    tags:
        - agent-smith

    after_script:
        - date -u

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs

vortex-opensplice-dds:
    stage: dependencies

    before_script:
        - date -u
#        - export PROTOBUF_HOME=`pwd`
#        sudo apt-get install python-wheel cython cython3 python3-wheel  #build Python DCPS API
#        export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH
#        export QTDIR=/opt/Qt5.11.2/5.11.2/gcc_64
#        export  PROTOBUF_HOME=
    script:
        - git clone --depth=1 --recurse-submodules https://github.com/ADLINK-IST/opensplice.git
        - cd opensplice
        - ./configure x86_64.linux-release --prefix=${CI_PROJECT_DIR}/devslibs
        - source envs-x86_64.linux-release.sh
        - make && make install
        - cd ..

    after_script:
        - date -u
        - mkdir -pv ${CI_PROJECT_DIR}/devslibs/adlinktech
        - cp -v envs-x86_64.linux-release.sh ${CI_PROJECT_DIR}/devslibs/adlinktech
        - cp -Rv install/HDE ${CI_PROJECT_DIR}/devslibs/adlinktech
        - cp -Rv install/RTS ${CI_PROJECT_DIR}/devslibs/adlinktech
        - cp -Rv install/VS ${CI_PROJECT_DIR}/devslibs/adlinktech
    tags:
        - agent-smith

    artifacts:
        name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
        paths:
            - ${CI_PROJECT_DIR}/devslibs
